name: Upstream Sync

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

env:
  UPSTREAM_REPO: sugyan/claude-code-webui
  UPSTREAM_BRANCH: main

jobs:
  sync:
    name: Sync with Upstream
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper merging
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
          git remote set-url upstream https://github.com/${{ env.UPSTREAM_REPO }}.git

      - name: Fetch upstream changes
        id: fetch
        run: |
          git fetch upstream ${{ env.UPSTREAM_BRANCH }}

          # Check if there are new commits
          LOCAL=$(git rev-parse HEAD)
          REMOTE=$(git rev-parse upstream/${{ env.UPSTREAM_BRANCH }})

          if [ "${LOCAL}" = "${REMOTE}" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Already up to date with upstream"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Get commit count and details
            COMMIT_COUNT=$(git rev-list --count ${LOCAL}..${REMOTE})
            echo "commit_count=${COMMIT_COUNT}" >> $GITHUB_OUTPUT

            COMMIT_INFO=$(git log --oneline ${LOCAL}..${REMOTE} | head -10)
            echo "commit_info<<EOF" >> $GITHUB_OUTPUT
            echo "${COMMIT_INFO}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            echo "üì¶ New commits available: ${COMMIT_COUNT}"
          fi

      - name: Check for conflicts
        id: conflicts
        if: steps.fetch.outputs.has_changes == 'true'
        run: |
          # Attempt merge without committing
          if git merge --no-commit --no-ff upstream/${{ env.UPSTREAM_BRANCH }}; then
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
            git merge --abort || true
            echo "‚úÖ No conflicts detected"
          else
            echo "has_conflicts=true" >> $GITHUB_OUTPUT

            # Get list of conflicting files
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U | tr '\n' ', ')
            echo "conflict_files=${CONFLICT_FILES}" >> $GITHUB_OUTPUT

            git merge --abort || true
            echo "‚ùå Conflicts detected in: ${CONFLICT_FILES}"
          fi

      - name: Merge upstream changes
        id: merge
        if: steps.fetch.outputs.has_changes == 'true' && steps.conflicts.outputs.has_conflicts == 'false'
        run: |
          # Perform actual merge
          git merge upstream/${{ env.UPSTREAM_BRANCH }} -m "chore: Merge upstream changes from ${{ env.UPSTREAM_REPO }}

          Automatically merged ${{ steps.fetch.outputs.commit_count }} commits from upstream.

          Upstream commits:
          ${{ steps.fetch.outputs.commit_info }}"

          echo "‚úÖ Merge successful"

      - name: Push changes
        if: steps.fetch.outputs.has_changes == 'true' && steps.conflicts.outputs.has_conflicts == 'false'
        run: |
          git push origin main
          echo "‚úÖ Pushed to origin/main"

      - name: Send Slack notification - Upstream detected
        if: steps.fetch.outputs.has_changes == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST "${SLACK_WEBHOOK_URL}" \
              -H 'Content-Type: application/json' \
              -d '{
                "attachments": [{
                  "color": "#36a64f",
                  "title": "‚¨áÔ∏è Upstream Changes Detected",
                  "text": "New commits available from '"${{ env.UPSTREAM_REPO }}"'. Attempting auto-merge...",
                  "fields": [
                    {"title": "Commits", "value": "'"${{ steps.fetch.outputs.commit_count }}"'", "short": true},
                    {"title": "Workflow", "value": "'"${{ github.run_id }}"'", "short": true}
                  ],
                  "footer": "Spicy Claude Upstream Sync"
                }]
              }'
          fi

      - name: Send Slack notification - Success
        if: steps.fetch.outputs.has_changes == 'true' && steps.conflicts.outputs.has_conflicts == 'false' && steps.merge.outcome == 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST "${SLACK_WEBHOOK_URL}" \
              -H 'Content-Type: application/json' \
              -d '{
                "attachments": [{
                  "color": "good",
                  "title": "‚úÖ Upstream Merge Successful",
                  "text": "Successfully merged upstream changes and pushed to main.\n\nCommits:\n'"$(echo '${{ steps.fetch.outputs.commit_info }}' | sed 's/"/\\"/g')"'",
                  "fields": [
                    {"title": "Commits", "value": "'"${{ steps.fetch.outputs.commit_count }}"'", "short": true},
                    {"title": "Workflow", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View>", "short": true}
                  ],
                  "footer": "Spicy Claude Upstream Sync"
                }]
              }'
          fi

      - name: Send Slack notification - Conflicts
        if: steps.fetch.outputs.has_changes == 'true' && steps.conflicts.outputs.has_conflicts == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST "${SLACK_WEBHOOK_URL}" \
              -H 'Content-Type: application/json' \
              -d '{
                "attachments": [{
                  "color": "danger",
                  "title": "‚ùå Merge Conflicts Detected",
                  "text": "Unable to auto-merge upstream changes. Manual resolution required.\n\nConflicting files:\n'"${{ steps.conflicts.outputs.conflict_files }}"'",
                  "fields": [
                    {"title": "Action Required", "value": "Manual merge needed", "short": true},
                    {"title": "Workflow", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View>", "short": true}
                  ],
                  "footer": "Spicy Claude Upstream Sync"
                }]
              }'
          fi

      - name: Create issue on conflicts
        if: steps.fetch.outputs.has_changes == 'true' && steps.conflicts.outputs.has_conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Upstream Sync Conflicts Require Manual Resolution',
              body: `## Merge Conflicts Detected

              The automated upstream sync from \`${{ env.UPSTREAM_REPO }}\` has detected merge conflicts that require manual resolution.

              **Conflicting Files:**
              \`\`\`
              ${{ steps.conflicts.outputs.conflict_files }}
              \`\`\`

              **Upstream Commits to Merge:**
              \`\`\`
              ${{ steps.fetch.outputs.commit_info }}
              \`\`\`

              **To Resolve:**
              1. \`git fetch upstream main\`
              2. \`git merge upstream/main\`
              3. Resolve conflicts in the listed files
              4. Test thoroughly, especially Dangerous Mode functionality
              5. \`git commit\` and \`git push\`

              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              `,
              labels: ['upstream-sync', 'merge-conflict', 'manual-action-required']
            });

            console.log('Created issue #' + issue.data.number);
