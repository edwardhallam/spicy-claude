name: Sync to Public Repository

on:
  push:
    tags:
      - 'v*'  # Triggered on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual trigger

jobs:
  sync-public:
    name: Sync to Public Repo
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Run sync-to-public script
        run: |
          chmod +x scripts/sync-to-public.sh
          scripts/sync-to-public.sh

      - name: Verify no secrets leaked
        run: |
          echo "üîç Final verification of public branch..."

          git checkout public-main

          # Check for common secret patterns
          SECRET_CHECK=0

          if git grep -i "webhook" -- '*.sh' '*.md' '*.yml' '*.yaml' 2>/dev/null | grep -v "public-repo-filter" | grep -v "sync-public"; then
            echo "‚ùå Found webhook references"
            SECRET_CHECK=1
          fi

          if git grep -i "edwardhallam" -- '*.md' '*.sh' 2>/dev/null; then
            echo "‚ùå Found personal username"
            SECRET_CHECK=1
          fi

          if git grep -i "homelab" -- '*.md' '*.sh' 2>/dev/null; then
            echo "‚ùå Found homelab references"
            SECRET_CHECK=1
          fi

          if [ -f "CLAUDE.md" ]; then
            echo "‚ùå CLAUDE.md should not be in public branch"
            SECRET_CHECK=1
          fi

          if [ -d "deployment" ]; then
            echo "‚ùå deployment/ directory should not be in public branch"
            SECRET_CHECK=1
          fi

          if [ ${SECRET_CHECK} -eq 1 ]; then
            echo "‚ùå Secret verification failed!"
            exit 1
          fi

          echo "‚úÖ No secrets detected in public branch"

      - name: Get tag info
        id: tag
        run: |
          if [ -n "${GITHUB_REF}" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "tag_name=manual-sync-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Push to public repository
        env:
          PUBLIC_REPO_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        run: |
          # Setup public remote (using token for authentication)
          git remote add public https://x-access-token:${PUBLIC_REPO_TOKEN}@github.com/edwardhallam/spicy-claude.git || true
          git remote set-url public https://x-access-token:${PUBLIC_REPO_TOKEN}@github.com/edwardhallam/spicy-claude.git

          # Push public-main branch to public repo's main branch
          git checkout public-main
          git push public public-main:main --force

          echo "‚úÖ Pushed to public repository"

      - name: Create GitHub Release in public repo
        if: steps.tag.outputs.is_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        run: |
          # Get release notes from current repo
          RELEASE_NOTES=$(gh release view ${{ steps.tag.outputs.tag_name }} --json body --jq .body || echo "See CHANGELOG.md for details")

          # Create release in public repo
          gh release create ${{ steps.tag.outputs.tag_name }} \
            --repo edwardhallam/spicy-claude \
            --title "Spicy Claude ${{ steps.tag.outputs.tag_name }}" \
            --notes "${RELEASE_NOTES}" \
            --draft=false \
            --prerelease=false

          echo "‚úÖ Created release in public repository"

      - name: Send Slack notification - Success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST "${SLACK_WEBHOOK_URL}" \
              -H 'Content-Type: application/json' \
              -d '{
                "attachments": [{
                  "color": "good",
                  "title": "‚úÖ Public Repository Sync Successful",
                  "text": "Spicy Claude has been synced to public repository.",
                  "fields": [
                    {"title": "Tag", "value": "'"${{ steps.tag.outputs.tag_name }}"'", "short": true},
                    {"title": "Is Release", "value": "'"${{ steps.tag.outputs.is_release }}"'", "short": true},
                    {"title": "Public Repo", "value": "https://github.com/edwardhallam/spicy-claude", "short": false}
                  ],
                  "footer": "Spicy Claude Public Sync"
                }]
              }'
          fi

      - name: Send Slack notification - Failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST "${SLACK_WEBHOOK_URL}" \
              -H 'Content-Type: application/json' \
              -d '{
                "attachments": [{
                  "color": "danger",
                  "title": "‚ùå Public Repository Sync Failed",
                  "text": "Failed to sync Spicy Claude to public repository. Check workflow logs.",
                  "fields": [
                    {"title": "Workflow", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View>", "short": false}
                  ],
                  "footer": "Spicy Claude Public Sync"
                }]
              }'
          fi

      - name: Cleanup
        if: always()
        run: |
          git checkout main
